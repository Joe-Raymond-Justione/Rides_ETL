import pandas as pd
if 'transformer' not in globals():
    from mage_ai.data_preparation.decorators import transformer
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test


@transformer
def transform(df, *args, **kwargs):
    """
    Template code for a transformer block.

    Add more parameters to this function if this block has multiple parent blocks.
    There should be one parameter for each output variable from each parent block.

    Args:
        data: The output from the upstream parent block
        args: The output from any additional upstream blocks (if applicable)

    Returns:
        Anything (e.g. data frame, dictionary, array, int, str, etc.)
    """
    # Checking and converting date columns to type 'datetime'
    # Converting pickup and drop columsn to type 'datetime'

    df['pickup_datetime'] = pd.to_datetime(df['pickup_datetime'])
    df['dropoff_datetime'] = pd.to_datetime(df['dropoff_datetime'])

    # Dropping duplicates from the df 
    df = df.drop_duplicates().reset_index(drop=True)

    # Creating 'trip_id' that identifies each trip
    df['trip_id'] = df.index

    ## Dimension Tables
    # 1. datetime_dim: Extracting features from dattime columns in the df.
    datetime_dim = df[['pickup_datetime','dropoff_datetime']].reset_index(drop=True)
    datetime_dim['pickup_datetime'] = datetime_dim['pickup_datetime']
    datetime_dim['pick_hour'] = datetime_dim['pickup_datetime'].dt.hour
    datetime_dim['pick_day'] = datetime_dim['pickup_datetime'].dt.day
    datetime_dim['pick_month'] = datetime_dim['pickup_datetime'].dt.month
    datetime_dim['pick_year'] = datetime_dim['pickup_datetime'].dt.year
    datetime_dim['pick_weekday'] = datetime_dim['pickup_datetime'].dt.weekday

    datetime_dim['dropoff_datetime'] = datetime_dim['dropoff_datetime']
    datetime_dim['drop_hour'] = datetime_dim['dropoff_datetime'].dt.hour
    datetime_dim['drop_day'] = datetime_dim['dropoff_datetime'].dt.day
    datetime_dim['drop_month'] = datetime_dim['dropoff_datetime'].dt.month
    datetime_dim['drop_year'] = datetime_dim['dropoff_datetime'].dt.year
    datetime_dim['drop_weekday'] = datetime_dim['dropoff_datetime'].dt.weekday


    datetime_dim['datetime_id'] = datetime_dim.index

    # datetime_dim = datetime_dim.rename(columns={'tpep_pickup_datetime': 'datetime_id'}).reset_index(drop=True)
    datetime_dim = datetime_dim[['datetime_id', 'pickup_datetime', 'pick_hour', 'pick_day', 'pick_month', 'pick_year', 'pick_weekday',
                                'dropoff_datetime', 'drop_hour', 'drop_day', 'drop_month', 'drop_year', 'drop_weekday']]
    
    
    # 2. passenger_count_dim: 
    # Creating a dimension table for 'passenger_count_dim' 
    passenger_count_dim = df[['passenger_count']].reset_index(drop=True)

    passenger_count_dim['passenger_countID'] = passenger_count_dim.index

    # Rearraning the cols
    passenger_count_dim = passenger_count_dim[['passenger_countID','passenger_count']]

    # 3. trip_distance_dim:
    trip_distance_dim = df[['trip_distance']].reset_index(drop=True)
    trip_distance_dim['trip_distanceID'] = trip_distance_dim.index

    # Rearraning the cols
    trip_distance_dim = trip_distance_dim[['trip_distanceID','trip_distance']]

    # 4. pickup_location_dim and 5. drop_location_dim:
    pickup_location_dim = df[['pickup_longitude', 'pickup_latitude']].reset_index(drop=True)
    pickup_location_dim['pickup_location_id'] = pickup_location_dim.index
    pickup_location_dim = pickup_location_dim[['pickup_location_id','pickup_latitude','pickup_longitude']] 

    dropoff_location_dim = df[['dropoff_longitude', 'dropoff_latitude']].reset_index(drop=True)
    dropoff_location_dim['dropoff_location_id'] = dropoff_location_dim.index
    dropoff_location_dim = dropoff_location_dim[['dropoff_location_id','dropoff_latitude','dropoff_longitude']]

    # 6. Rate_code_dim:
    # Creating dict to assign names for rate code types
    rate_code_type = {
        1:"Standard rate",
        2:"JFK",
        3:"Newark",
        4:"Nassau or Westchester",
        5:"Negotiated fare",
        6:"Group ride"
    }

    rate_code_dim = df[['rate_code']].reset_index(drop=True)
    rate_code_dim['rate_code_id'] = rate_code_dim.index
    rate_code_dim['rate_code_name'] = rate_code_dim['rate_code'].map(rate_code_type)
    rate_code_dim = rate_code_dim[['rate_code_id','rate_code','rate_code_name']]

    # 7. payment_type_dim:
    # Creating dict to assign names for payment types
    payment_type_name = {
        1:"Credit card",
        2:"Cash",
        3:"No charge",
        4:"Dispute",
        5:"Unknown",
        6:"Voided trip"
    }

    payment_type_dim = df[['payment_type']].reset_index(drop=True)
    payment_type_dim['payment_typeID'] = payment_type_dim.index
    payment_type_dim['payment_type_name'] = df['payment_type'].map(payment_type_name)
    payment_type_dim  = payment_type_dim[['payment_typeID', 'payment_type_name']]    

    ## Fact table:
    fact_table = df.merge(passenger_count_dim, left_on='trip_id', right_on='passenger_countID') \
             .merge(trip_distance_dim, left_on='trip_id', right_on='trip_distanceID') \
             .merge(rate_code_dim, left_on='trip_id', right_on='rate_code_id') \
             .merge(pickup_location_dim, left_on='trip_id', right_on='pickup_location_id') \
             .merge(dropoff_location_dim, left_on='trip_id', right_on='dropoff_location_id')\
             .merge(datetime_dim, left_on='trip_id', right_on='datetime_id') \
             .merge(payment_type_dim, left_on='trip_id', right_on='payment_typeID') \
             [['trip_id','vendor_id', 'datetime_id', 'passenger_countID',
               'trip_distanceID', 'rate_code_id', 'store_and_fwd_flag', 'pickup_location_id', 'dropoff_location_id',
               'payment_typeID', 'fare_amount', 'mta_tax', 'tip_amount', 'tolls_amount',
               'imp_surcharge', 'total_amount']]  


    return {"datetime_dim":datetime_dim.to_dict(orient="dict"),
    "passenger_count_dim":passenger_count_dim.to_dict(orient="dict"),
    "trip_distance_dim":trip_distance_dim.to_dict(orient="dict"),
    "rate_code_dim":rate_code_dim.to_dict(orient="dict"),
    "pickup_location_dim":pickup_location_dim.to_dict(orient="dict"),
    "dropoff_location_dim":dropoff_location_dim.to_dict(orient="dict"),
    "payment_type_dim":payment_type_dim.to_dict(orient="dict"),
    "fact_table":fact_table.to_dict(orient="dict")} 


@test
def test_output(output, *args) -> None:
    """
    Template code for testing the output of the block.
    """
    assert output is not None, 'The output is undefined'
